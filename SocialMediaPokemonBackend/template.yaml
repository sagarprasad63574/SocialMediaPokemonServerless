AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SocialMediaPokemonBackend

  Sample SAM Template for SocialMediaPokemonBackend
  
Globals:
  Function:
    Timeout: 3

Resources:
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/login-function/
      Handler: login-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /users
            Method: put
          Cors: 
              AllowOrigins: 
                - "*"

  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/register-function/
      Handler: register-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
      Layers:
        - !Ref GeneratorLayers
      Events:
        Register:
          Type: Api
          Properties:
            Path: /users
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  TokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/token-function/
      Handler: token-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /token
            Method: get
          Cors: 
              AllowOrigins: 
                - "*"

  AddTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/add-team-function/
      Handler: add-team-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /teams
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  GetUserTeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/get-teams-function/
      Handler: get-teams-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /teams
            Method: get
          Cors: 
              AllowOrigins: 
                - "*"

  GetUserTeamByTeamIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/get-team-byteamId-function/
      Handler: get-team-byteamId-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /teams/{id}
            Method: get
          Cors: 
              AllowOrigins: 
                - "*"

  EditUserTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/edit-team-function/
      Handler: edit-team-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /teams/{id}
            Method: put
          Cors: 
              AllowOrigins: 
                - "*"

  DeleteUserTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/delete-team-function/
      Handler: delete-team-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /teams/{id}
            Method: delete
          Cors: 
              AllowOrigins: 
                - "*"

  AddPostedTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post-teams/add-posted-team-function/
      Handler: add-posted-team-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /posts/{id}
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  GetPostedTeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post-teams/get-posted-teams-function/
      Handler: get-posted-teams-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /posts
            Method: get
          Cors: 
              AllowOrigins: 
                - "*"

  GetPostedTeamsByTeamIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post-teams/get-posted-team-byteamId-function/
      Handler: get-posted-team-byteamId-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /posts/{id}
            Method: get
          Cors: 
              AllowOrigins: 
                - "*"

  SearchPokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pokemons/search-pokemon-function/
      Handler: search-pokemon-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /pokemon/{pokemon}
            Method: get
          Cors: 
              AllowOrigins: 
                - "*"

  AddPokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pokemons/add-pokemon-function/
      Handler: add-pokemon-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /pokemon
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  DeletePokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pokemons/delete-pokemon-function/
      Handler: delete-pokemon-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /pokemon
            Method: delete
          Cors: 
              AllowOrigins: 
                - "*"

  AddMovePokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pokemons/add-move-function/
      Handler: add-move-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /move/{teamid}/{pokeid}
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  CreateMyPokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: my-pokemons/create-mypokemon-function/
      Handler: create-mypokemon-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /myPokemon
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  ViewMyPokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: my-pokemons/get-mypokemon-function/
      Handler: get-mypokemon-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /myPokemon
            Method: get
          Cors: 
              AllowOrigins: 
                - "*"

  EditMyPokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: my-pokemons/edit-mypokemon-function/
      Handler: edit-mypokemon-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /myPokemon/{id}
            Method: put
          Cors: 
              AllowOrigins: 
                - "*"

  DeleteMyPokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: my-pokemons/delete-mypokemon-function/
      Handler: delete-mypokemon-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /myPokemon/{id}
            Method: delete
          Cors: 
              AllowOrigins: 
                - "*"

  AddMyPokemonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: my-pokemons/add-mypokemon-function/
      Handler: add-mypokemon-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /myPokemon/add/{id}
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  GetProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: profile/get-profile-function/
      Handler: get-profile-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /profiles
            Method: get
          Cors: 
              AllowOrigins: 
                - "*"

  EditProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: profile/edit-profile-function/
      Handler: edit-profile-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /profiles
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  BattleSimulatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: battle/post-battle-simulator-function/
      Handler: post-battle-simulator-handler.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SocialMediaPokemonTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SocialMediaPokemonTable
          SECRET_KEY: secret-key
      Layers:
        - !Ref GeneratorLayers
      Events:
        Login:
          Type: Api
          Properties:
            Path: /battleSim
            Method: post
          Cors: 
              AllowOrigins: 
                - "*"

  GeneratorLayers:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes: 
        - nodejs18.x
      ContentUri: dependencies/
      Description: dependencies for social media pokemon api
      LayerName: dependencies
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  SocialMediaPokemonTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: username
          AttributeType: S
        - AttributeName: role
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: username-index
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1  
        - IndexName: role-index
          KeySchema:
            - AttributeName: role
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1  
Outputs:
  SocialMediaPokemonApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
